
						TALLER MYSQL


## **üîπ Caso 1: Control de Stock de Productos**

### **Escenario:**

Una tienda en l√≠nea necesita asegurarse de que los clientes no puedan comprar m√°s unidades de un producto del stock disponible. Si intentan hacerlo, la compra debe **bloquearse**.

### **Tarea:**

1. Crear las tablas `productos` y `ventas`.
2. Implementar un trigger `BEFORE INSERT` para evitar ventas con cantidad mayor al stock disponible.
3. Probar el trigger.
		SOLUCION:
	1. CREATE TABLE productos (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    nombre VARCHAR(50),
	    stock INT
	);

	CREATE TABLE ventas (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    id_producto INT,
	    cantidad INT,
	    FOREIGN KEY (id_producto) REFERENCES productos(id)
	);
	
	 2. DELIMITER $$
	 
	 CREATE TRIGGER
	 check_stock_before_insert
	 BEFORE INSERT ON ventas
	 FOR EACH ROW
	 BEGIN
	 	DECLARE current_stock INIT;
----------------------------------------------------------------------------------------------------------
	-obtener el stock actual del producto
	SELECT stock INTO current_stock
	FROM productos
	WHERE id = NEW.id_productos;
	
----------------------------------------------------------------------------------------------------------
	-verificar si la cantidad es mayor al stock disponible
	
	IF NEW.cantidad >
     current_stock THEN
     	  SIGNAL SQLSTATE '45000' SET
     MESSAGE_TEXT = 'cantidad vendida supera el stock disponible';
          END IF;
        END $$
        
        DELIMITER ;
        
        3. ------------------------------------------------------------------------------------------------------
        -SE INSERTA UN PRODUCTO
        
        INSERT INTO productos (nombre, stock) VALUES ('Laptop', 10);
        
        -venta v√°lida (cantidad ‚â§ stock)
        
        INSERT INTO ventas (id_producto, cantidad) VALUES (1, 5);
        
        -venta inv√°lida (cantidad > stock)

	INSERT INTO ventas (id_producto, cantidad) VALUES (1, 20);
	
## **üîπ Caso 2: Registro Autom√°tico de Cambios en Salarios**

### **Escenario:**

La empresa **TechCorp** desea mantener un registro hist√≥rico de todos los cambios de salario de sus empleados.

### **Tarea:**

1. Crear las tablas `empleados` y `historial_salarios`.
2. Implementar un trigger `BEFORE UPDATE` que registre cualquier cambio en el salario.
3. Probar el trigger.
		SOLUCION:

	1. CREATE TABLE empleados (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    nombre VARCHAR(50),
	    salario DECIMAL(10,2)
	);

	CREATE TABLE historial_salarios (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    id_empleado INT,
	    salario_anterior DECIMAL(10,2),
	    salario_nuevo DECIMAL(10,2),
	    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	    FOREIGN KEY (id_empleado) REFERENCES empleados(id)
	);
	
	2.DELIMITER $$

	CREATE TRIGGER registrar_cambio_salario
	BEFORE UPDATE ON empleados
	FOR EACH ROW
	BEGIN
	    -- Verificamos si el salario ha cambiado
	    IF OLD.salario <> NEW.salario THEN
		INSERT INTO historial_salarios (
		    id_empleado,
		    salario_anterior,
		    salario_nuevo
		) VALUES (
		    OLD.id,
		    OLD.salario,
		    NEW.salario
		);
	    END IF;
	END;
	$$

	DELIMITER ;
	
	3.
	-se inserta un empleado
	
	INSERT INTO empleados (nombre, salario) VALUES ('paulina galvis', 3200.00);
	
	-actualizar salario del empleado
	
	UPDATE empleados SET salario = 3500.00 WHERE id = 1;
	
	-verificar el historial
	
	SELECT * FROM historial_salarios WHERE id_empleado = 1;

## **üîπ Caso 3: Registro de Eliminaciones en Auditor√≠a**

### **Escenario:**

La empresa **DataSecure** quiere registrar toda eliminaci√≥n de clientes en una tabla de auditor√≠a para evitar p√©rdidas accidentales de datos.

### **Tarea:**

1. Crear las tablas `clientes` y `clientes_auditoria`.
2. Implementar un trigger `AFTER DELETE` para registrar los clientes eliminados.
3. Probar el trigger.	
	SOLUCION:

	1.CREATE TABLE clientes (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    nombre VARCHAR(50),
	    email VARCHAR(50)
	);

	CREATE TABLE clientes_auditoria (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    id_cliente INT,
	    nombre VARCHAR(50),
	    email VARCHAR(50),
	    fecha_eliminacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	);
	
	2. DELIMITER $$

	CREATE TRIGGER auditoria_eliminacion_cliente
	AFTER DELETE ON clientes
	FOR EACH ROW
	BEGIN
	    INSERT INTO clientes_auditoria (
		id_cliente,
		nombre,
		email
	    ) VALUES (
		OLD.id,
		OLD.nombre,
		OLD.email
	    );
	END;
	$$

	DELIMITER ;
	
	3. 
	-insertar cliente
	
	INSERT INTO clientes (nombre, email) VALUES ('Laura Torres', 'lauraT@example.com');
	
	-eliminar cliente 
	
	DELETE FROM clientes WHERE id = 1;

	-consultar el registro de la tabla auditoria
	
	SELECT * FROM clientes_auditoria WHERE id_cliente = 1;

## **üîπ Caso 4: Restricci√≥n de Eliminaci√≥n de Pedidos Pendientes**

### **Escenario:**

En un sistema de ventas, no se debe permitir eliminar pedidos que a√∫n est√°n **pendientes**.

### **Tarea:**

1. Crear las tablas `pedidos`.
2. Implementar un trigger `BEFORE DELETE` para evitar la eliminaci√≥n de pedidos pendientes.
3. Probar el trigger.
	SOLUCION:

	1.CREATE TABLE pedidos (
	    id INT PRIMARY KEY AUTO_INCREMENT,
	    cliente VARCHAR(100),
	    estado ENUM('pendiente', 'completado')
	);
	
	2.DELIMITER $$

	CREATE TRIGGER evitar_eliminacion_pedidos_pendientes
	BEFORE DELETE ON pedidos
	FOR EACH ROW
	BEGIN
	    IF OLD.estado = 'pendiente' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'No se puede eliminar un pedido con estado pendiente.';
	    END IF;
	END;
	$$

	DELIMITER ;
	
	3.
	-insertar pedidos
	
	INSERT INTO pedidos (cliente, estado) VALUES ('Juan Paez', 'pendiente');
	INSERT INTO pedidos (cliente, estado) VALUES ('Henry L√≥pez', 'completado');
	
	
	-eliminar un pedido pendiente
	
	DELETE FROM pedidos WHERE id = 1;
	

	-eliminar un pedido completado
	
	DELETE FROM pedidos WHERE id = 2;
	


	


        	 	
	 	
